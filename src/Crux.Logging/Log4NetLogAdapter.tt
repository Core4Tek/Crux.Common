<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;

namespace Crux.Logging 
{
	/// <summary>
	/// Summary description for Log4NetLogAdapter.
	/// </summary>
	public class Log4NetLogAdapter : ILog 
	{
		private readonly log4net.ILog _log;

		public Log4NetLogAdapter(log4net.ILog log) 
		{
			_log = log;
		}
	<# var methodNames = new[] { "Debug", "Info", "Warn", "Error", "Fatal" }; #>
	<# foreach (var method in methodNames) { #>

		public void <#=method#>(object message) 
		{
			_log.<#=method#>(message.ToString());
		}

		public void <#=method#>(string message, params object[] args) 
		{
			_log.<#=method#>(String.Format(message, args));
		}

		public void <#=method#>(IFormatProvider provider, string message, params object[] args) 
		{
			_log.<#=method#>(String.Format(provider, message, args));
		}

		public void <#=method#>(object message, Exception e) 
		{
			_log.<#=method#>(message, e);
		}

		public void <#=method#>(string message, Exception e, params object[] args) 
		{
			_log.<#=method#>(String.Format(message, args), e);
		}

		public void <#=method#>(IFormatProvider provider, string message, Exception e, params object[] args) 
		{
			_log.<#=method#>(String.Format(provider, message, args), e);
		}

		public bool Is<#=method#>Enabled 
		{
			get { return _log.Is<#=method#>Enabled; }
		}
	<# } #>
	}
}